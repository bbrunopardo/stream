// The stream micro-blog server

{
	default: default
	slice: slice
	map: map
} := import('std')
{
	join: join
	replace: replace
	trim: trim
} := import('str')
{
	format: format
	printf: printf
} := import('fmt')
fs := import('fs')
datetime := import('datetime')
path := import('path')
json := import('json')
http := import('http')

config := import('config')
model := import('model')
view := import('view')

PageHeaders := {
	'Content-Type': 'text/html'
}

server := http.Server()

with server.route('/updates/:timestamp') fn(params) fn(req, end) if req.method {
	'GET' -> if timestamp := int(params.timestamp) {
		? -> end({
			status: 400
			headers: PageHeaders
			body: view.page(
				view.search() << view.message('Invalid timestamp "' << params.timestamp << '".')
			)
		})
		_ -> with model.updatesAtTime(timestamp) fn(updates) if updates {
			?, [] -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() << view.message('No updates from this time.')
				)
			})
			_ -> if params.raw {
				? -> end({
					status: 200
					headers: PageHeaders
					body: view.page(
						view.feed(updates)
						''
					)
				})
				_ -> end({
					status: 200
					headers: { 'Content-Type': http.MimeTypes.txt }
					body: updates |> map(fn(u) u.s) |> join('\n\n')
				})
			}
		}
	}
	_ -> end(http.MethodNotAllowed)
}

with server.route('/author/updates') fn(params) fn(req, end) if req.method {
	'POST' -> {
		// assume urlencoded form data format s=(.*)
		// it seems <form> textarea sends \r\n's, so translate those
		status := req.body |>
			slice(2) |>
			http.percentDecode() |>
			trim() |>
			replace('\r\n', '\n')
		with model.appendUpdate(status) fn(res) if res {
			true -> end({
				status: 303
				headers: { Location: '/' }
				body: ''
			})
			_ -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() << view.message('Could not save update. Please try again.')
				)
			})
		}
	}
	_ -> end(http.MethodNotAllowed)
}

with server.route('/author/delete') fn(params) fn(req, end) if req.method {
	'POST' -> {
		// assume urlencoded form data format t=(.*)
		timestamp := req.body |> slice(2) |> http.percentDecode() |> trim() |> int()
		with model.deleteAtTime(timestamp) fn(res) if res {
			true -> end({
				status: 303
				headers: { Location: '/' }
				body: ''
			})
			_ -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() << view.message('Could not delete this update. Please try again.')
				)
			})
		}
	}
	_ -> end(http.MethodNotAllowed)
}

with server.route('/on/:year/:month/:day') fn(params) fn(req, end) if req.method {
	'GET' -> if [year, month, day] := [params.year, params.month, params.day] |> map(int) {
		[?, _, _], [_, ?, _], [_, _, ?] -> end({
			status: 400
			headers: PageHeaders
			body: view.page(
				view.search() << view.message('Invalid request.')
			)
		})
		_ -> with model.updatesOnDay(year, month, day) fn(updates) if updates {
			? -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() << view.message('Could not read the latest updates.')
				)
			})
			_ -> end({
				status: 200
				headers: PageHeaders
				body: view.page(
					view.search() << view.feed(updates)
					'Updates on {{0}}/{{1}}/{{2}}' |> format(params.year, params.month, params.day)
				)
			})
		}
	}
	_ -> end(htpt.MethodNotAllowed)
}

with server.route('/s/*staticPath') fn(params) {
	http.handleStatic(path.join('./static', params.staticPath))
}

with server.route('/author/') fn(params) fn(req, end) if req.method {
	'GET' -> end({
		status: 200
		headers: PageHeaders
		body: view.page(
			view.author()
			'Author'
		)
	})
	_ -> end(http.MethodNotAllowed)
}

with server.route('/about/') fn(params) fn(req, end) if req.method {
	'GET' -> end({
		status: 200
		headers: PageHeaders
		body: view.page(
			view.about()
			'About the stream'
		)
	})
	_ -> end(http.MethodNotAllowed)
}

with server.route('/') fn(params) fn(req, end) if req.method {
	'GET' -> {
		page := int(params.p) |> default(1)
		count := int(params.n) |> default(config.PageSize)
		query := params.q
		raw? := params.raw != ?

		with model.latestUpdates(page, count, query) fn(updates, last?, next?) if updates {
			? -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() << view.message('Could not read latest updates.')
				)
			})
			_ -> if raw? {
				true -> end({
					status: 200
					headers: { 'Content-Type': http.MimeTypes.json }
					body: json.serialize(updates)
				})
				_ -> end({
					status: 200
					headers: PageHeaders
					body: view.page(
						view.search(query) <<
							view.content(updates, last?, next?, page, count, query)
						if query {
							? -> ?
							_ -> 'Search "{{0}}"' |> format(query)
						}
					)
				})
			}
		}
	}
	_ -> end(http.MethodNotAllowed)
}

server.start(config.Port)
printf('Stream server running at {{0}}', config.Port)

